import pickle, base64

class Node():

    def __init__(self):
        print('fake node to bypass attribute-not-found error in pickle.load')

def decode(node, data):
    flag = ''
    cur = node

    for i in range(len(data)):
        if not cur.left and not cur.right:
            flag += cur.data
            cur = node

        if data[i] == '0':
            cur = cur.left
        else:
            cur = cur.right

    if not cur.left and not cur.right:
        flag += cur.data

    return flag

if __name__ == '__main__':

    encoded_data

    node = pickle.load(open('node_data.txt', 'rb'))

    flag = decode(node, encoded_data)
    # print('huffman decoded:', flag)
    flag = base64.b64decode(flag).decode()
    # print('flag:',flag )
    print("CTFlearn{"+ flag.split('{')[1])